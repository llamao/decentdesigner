using System.Xml;
using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Main : MonoBehaviour
{
    public string fileContent;

    public void GenerateFile()
    {
        XmlTextWriter xmlWriter = new XmlTextWriter("product.xml", System.Text.Encoding.UTF8);

        xmlWriter.Formatting = Formatting.Indented;
        xmlWriter.WriteStartDocument();
        xmlWriter.WriteComment("Generated by DecentDesigner " + DateTime.Now.ToShortDateString());
        xmlWriter.WriteStartElement("DecentSampler");
        xmlWriter.WriteAttributeString("pluginVersion", "1");

        xmlWriter.WriteStartElement("groups");
        xmlWriter.WriteAttributeString("seqMode", "true_random");

        // create an element for every group
        foreach (GroupElement group in groupElements)
        {
            xmlWriter.WriteStartElement("group");
            foreach (DSAttribute attribute in group.attributes)
            {
                string value = attribute.value;
                xmlWriter.WriteAttributeString(attribute.name, value);
            }

            // then create an element for every sample
            foreach (SampleElement sample in group.samples)
            {
                xmlWriter.WriteStartElement("sample");
                //// required attribute
                //xmlWriter.WriteAttributeString("path", sample.GetAttribute("path").value);
                //// required attribute
                //xmlWriter.WriteAttributeString("rootNote", sample.GetAttribute("rootNote").value);

                // add attributes to this sample
                foreach (DSAttribute attribute in sample.attributes)
                {
                    if (attribute.name == "path")
                    {
                        attribute.value = Path.GetDirectoryName(attribute.value) + "/" + Path.GetFileName(attribute.value);
                    }
                    string value = attribute.value;
                    //if (attribute.name == "rootNote")
                    //{
                    //    value = Mathf.RoundToInt(float.Parse(value)).ToString();
                    //}
                    xmlWriter.WriteAttributeString(attribute.name, value);
                }
                xmlWriter.WriteEndElement();
            }

            xmlWriter.WriteEndElement();
        }

        xmlWriter.WriteEndDocument();
        xmlWriter.Close();
    }

    public void LoadXml(string xmlPath)
    {
        //var sr = new StreamReader(Application.dataPath + "/" + "product.xml");
        //var fileContents = sr.ReadToEnd();
        //sr.Close();

        XmlDocument d = new XmlDocument();
        //d.Load("file://F:/DecentSamplerDesigner/DecentSamplerDesigner/tricky.xml");
        d.Load(xmlPath);

        ParseXml(d);
    }

    public void ParseXml(XmlDocument xmlFile)
    {
        Debug.Log(xmlFile.OuterXml);

        // list of all groups
        XmlNodeList groupNodes = xmlFile.SelectNodes("DecentSampler/groups/group");


        // for every group,
        foreach (XmlNode node in groupNodes)
        {
            //List<Main.GroupElement> groups = new List<Main.GroupElement>();

            // create a group for this node
            GroupElement g = new GroupElement();
            foreach (XmlAttribute item in node.Attributes)
            {
                // add every attribute
                g.AddAttribute(item.Name, item.Value);
            }
            // then add this node to groups
            groupElements.Add(g);

            foreach (XmlNode child in node.ChildNodes)
            {
                SampleElement s = new SampleElement();

                foreach (XmlAttribute attr in child.Attributes)
                {
                    if (attr.Name == "path")
                    {
                        if (!samplePaths.Contains(attr.Value))
                        {
                            samplePaths.Add(attr.Value);
                        }
                        
                    }
                    // add every attribute
                    s.AddAttribute(attr.Name, attr.Value);
                    g.AddSample(s);
                }


                // then
            }
        }
    }

    public GroupsElement groupsElement = new GroupsElement();
    public List<GroupElement> groupElements = new List<GroupElement>();

    public List<string> samplePaths = new List<string>();

    private void Awake()
    {
        //GroupElement g = AddGroup();
        //g.AddAttribute("name", "Group 0");
        //g.AddAttribute("volume", "0.0db");
        //LoadXml();
    }

    public void DeleteGroup(GroupElement group)
    {
        groupElements.Remove(group);
    }

    public GroupElement AddGroup()
    {
        GroupElement group = new GroupElement();
        //group.name = name;
        //group.volume = volume;
        //group.ampVelTrack = ampVelTrack;

        groupElements.Add(group);

        return group;
    }

    public class DSElement
    {
        // sample attributes
        public List<DSAttribute> attributes = new List<DSAttribute>();

        public DSAttribute GetAttribute(string _name)
        {
            foreach (DSAttribute attr in attributes)
            {
                if (attr.name == _name)
                {
                    return attr;
                }
            }
            return null;
        }

        public void AddAttribute(string _name, string _value)
        {
            DSAttribute attribute = new DSAttribute();
            attribute.name = _name;
            attribute.value = _value;

            attributes.Add(attribute);
        }

        public void AddAttribute(string _name, string _value, GroupElement _parent)
        {
            DSAttribute attribute = new DSAttribute();
            attribute.name = _name;
            attribute.value = _value;

            attributes.Add(attribute);

            SetParent(_parent);
        }

        public virtual void SetParent(GroupElement _parent)
        {
            //parent = _parent;
        }

        public void RemoveAttribute(DSAttribute attr)
        {
            attributes.Remove(attr);
        }

        public List<DSAttribute> DeepCopy()
        {
            List<DSAttribute> listCopy = new List<DSAttribute>();

            foreach (DSAttribute item in attributes)
            {
                DSAttribute newAttr = new DSAttribute();
                newAttr.name = item.name;
                newAttr.value = item.value;
                listCopy.Add(newAttr);
            }


            return listCopy;
        }

        public bool HasAttribute(string _name)
        {
            bool success = false;
            foreach (DSAttribute item in attributes)
            {
                if (item.name == _name)
                {
                    success = true;
                }
            }
            return success;
        }
    }

    public class DSAttribute
    {
        public string name;
        public string value;

        public List<Action> onChangedActions = new List<Action>();

        public void SetValue(string _value)
        {
            value = _value;

            foreach (Action item in onChangedActions)
            {
                item.DynamicInvoke();
            }
        }
    }

    //Every dspreset file should have one and only one <groups> element. This is where you specify the samples that make up your sample library. This element lives right underneath the top-level <DecentSampler> element
    public class GroupsElement : DSElement
    {

    }

    public class GroupElement : DSElement
    {
        public List<SampleElement> samples = new List<SampleElement>();

        public SampleElement AddSample(string path, string root)
        {
            SampleElement sample = new SampleElement();
            sample.AddAttribute("path", path, this);
            sample.AddAttribute("rootNote", root, this);
            sample.parent = this;
            samples.Add(sample);
            return (sample);
        }

        public void AddSample(SampleElement element)
        {
            element.parent = this;
            if (samples.Contains(element))
            {
                return;
            }
            samples.Add(element);
        }

        public void RemoveSample(SampleElement sample)
        {
            samples.Remove(sample);
        }
    }

    public class SampleElement : DSElement
    {
        //public DSAttribute[] parameters;
        public GroupElement parent;

        public override void SetParent(GroupElement _parent)
        {
            parent = _parent;
        }
    }
}
